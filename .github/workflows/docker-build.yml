name: Build & Push Docker Image

on:
  push:
    branches: [main, master]
  workflow_dispatch: {}

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha
      - id: ver
        run: |
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "build_time=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
      - uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          build-args: |
            APP_VERSION=${{ steps.ver.outputs.sha_short }}
            BUILD_TIME=${{ steps.ver.outputs.build_time }}

  run-smoke:
    runs-on: ubuntu-latest
    needs: build-and-push
    env:
      IMAGE_REF: ghcr.io/${{ github.repository }}:sha-${{ github.sha }}
    steps:
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - run: docker pull "$IMAGE_REF"
      - run: |
          docker run -d --rm --name app -p 3000:3000 "$IMAGE_REF"
          for i in {1..30}; do
            if curl -fsS http://127.0.0.1:3000/health >/dev/null; then
              break
            fi
            sleep 2
          done
      - run: |
          expected="$(git rev-parse --short HEAD)"
          payload="$(curl -fsS http://127.0.0.1:3000/version)"
          version="$(echo "$payload" | jq -r .version)"
          [ "$version" = "$expected" ] || exit 1
      - run: docker stop app || true
